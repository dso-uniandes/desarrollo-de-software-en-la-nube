name: CI develop

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches:
      - 'feat/HU-**'

jobs:
  verificar-pruebas:
    name: Pruebas unitarias
    runs-on: ubuntu-latest
    outputs:
      respuesta-ok: ${{ steps.success.outputs.respuesta }}
      respuesta-fail: ${{ steps.failure.outputs.respuesta }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Configuración de entorno de Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: requirements.txt
          
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Esperar a que PostgreSQL esté listo
        run: |
          while ! pg_isready -h localhost -p 5432 -U postgres; do
            echo "Esperando a que PostgreSQL esté listo..."
            sleep 2
          done
          echo "PostgreSQL está listo!"

      - name: Configurar variables de entorno para tests
        run: |
          echo "ENV_STATE=test" >> $GITHUB_ENV
          echo "TEST_DATABASE_URL=postgresql+asyncpg://postgres:password@localhost:5432/test_db" >> $GITHUB_ENV

      - name: Correr pruebas con coverage
        run: |
          pytest storeapi/tests/ -v --tb=short \
            --cov=storeapi --cov-config=.coveragerc \
            --cov-report=xml:coverage.xml \
            --junitxml=test-results.xml

      - name: Verificar reportes generados
        run: |
          echo "=== VERIFICANDO REPORTES GENERADOS ==="
          ls -l coverage.xml || echo "❌ coverage.xml no generado"
          ls -l test-results.xml || echo "❌ test-results.xml no generado"
          if [ -f "coverage.xml" ]; then
            echo "✅ coverage.xml generado correctamente"
            head -5 coverage.xml
          fi
          if [ -f "test-results.xml" ]; then
            echo "✅ test-results.xml generado correctamente"
            head -5 test-results.xml
          fi

      - name: Publicar reportes de pruebas
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            coverage.xml
            test-results.xml

      - name: Status Error
        id: failure
        if: ${{ failure() }}
        env:
          MENSAJE_ERROR: FAIL
        run: echo "respuesta=${MENSAJE_ERROR}"  >> $GITHUB_OUTPUT

      - name: Status Success
        id: success
        if: ${{ success() }}
        env:
          MENSAJE_EXITO: OK
        run: echo "respuesta=${MENSAJE_EXITO}"  >> $GITHUB_OUTPUT
      
      - name: Imprimir respuesta
        id: imprimir
        run: |
          echo "Imprimir respuesta-ok ${{ steps.success.outputs.respuesta }}"
          echo "Imprimir respuesta-fail ${{ steps.failure.outputs.respuesta }}"

  sonarless:
    name: Análisis de calidad con Sonarless
    needs: verificar-pruebas
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Configuración de Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y jq curl

      - name: Descargar reportes de pruebas
        uses: actions/download-artifact@v4
        with:
          name: test-reports
          path: .

      - name: Verificar ubicación de coverage.xml y test-results.xml
        run: |
          echo "📄 Contenido actual del workspace:"
          ls -lh
          echo ""
          if [ ! -f "coverage.xml" ]; then
            echo "⚠️ coverage.xml no encontrado, buscando en subcarpetas..."
            FOUND=$(find . -name "coverage.xml" | head -n 1)
            if [ -n "$FOUND" ]; then
              mv "$FOUND" ./coverage.xml
              echo "✅ coverage.xml movido a la raíz"
            else
              echo "❌ coverage.xml no encontrado en ninguna carpeta"
            fi
          fi

          if [ ! -f "test-results.xml" ]; then
            echo "⚠️ test-results.xml no encontrado, buscando en subcarpetas..."
            FOUND=$(find . -name "test-results.xml" | head -n 1)
            if [ -n "$FOUND" ]; then
              mv "$FOUND" ./test-results.xml
              echo "✅ test-results.xml movido a la raíz"
            else
              echo "❌ test-results.xml no encontrado en ninguna carpeta"
            fi
          fi

          echo ""
          echo "📊 Archivos listos para Sonarless:"
          ls -lh coverage.xml test-results.xml || true

      - name: Sonarless Scan
        uses: gitricko/sonarless@v1.3
        id: sonarless-scan
        env:
          SONAR_SCANNER_OPTS: "-Dsonar.projectBaseDir=."
        with:
          sonar-source-path: "."
          sonar-project-key: "MISW4204-202515-anb-Grupo03-local"
          sonar-project-name: "MISW4204-202515-anb-Grupo03-local"
          sonar-metrics-path: "sonar-metrics.json"

      - name: Obtener detalles específicos de problemas
        run: |
          echo "🔍 === INTENTANDO OBTENER DETALLES DE PROBLEMAS ==="
          
          # Esperar un poco para que SonarQube esté completamente listo
          sleep 10
          
          # Intentar obtener issues desde la API de SonarQube local
          echo "Intentando conectar a SonarQube local..."
          
          # Probar diferentes puertos comunes de SonarQube
          for port in 9000 9234 8080; do
            echo "Probando puerto $port..."
            if curl -s -u admin:admin "http://localhost:$port/api/system/status" > /dev/null 2>&1; then
              echo "✅ SonarQube encontrado en puerto $port"
              SONAR_PORT=$port
              break
            fi
          done
          
          if [ -n "$SONAR_PORT" ]; then
            echo "🔍 Obteniendo issues desde SonarQube..."
            
            # Probar diferentes endpoints de la API
            echo "Probando diferentes endpoints de la API..."
            
            # Endpoint 1: Issues search
            echo "1. Probando /api/issues/search..."
            curl -s -u admin:admin "http://localhost:$SONAR_PORT/api/issues/search?componentKeys=MISW4204-202515-anb-Grupo03-local&resolved=false&ps=500" > sonar-issues.json
            
            # Verificar si el archivo tiene contenido válido
            if [ -f "sonar-issues.json" ] && [ -s "sonar-issues.json" ] && jq empty sonar-issues.json 2>/dev/null; then
              echo "✅ Issues obtenidos exitosamente"
              
              # Mostrar resumen
              TOTAL_ISSUES=$(jq '.total // 0' sonar-issues.json)
              echo "📊 Total de problemas encontrados: $TOTAL_ISSUES"
              
              if [ "$TOTAL_ISSUES" -gt 0 ]; then
                echo ""
                echo "🔍 === DETALLES DE PROBLEMAS ==="
                
                # Mostrar cada problema con detalles
                jq -r '.issues[]? | "📁 \(.component) - Línea \(.line)" as $location | "  • \(.message)" as $message | "  🏷️  Tipo: \(.type) | Severidad: \(.severity) | Regla: \(.rule)" as $details | "\($location)\n\($message)\n\($details)\n"' sonar-issues.json
                
                echo ""
                echo "📊 === RESUMEN POR TIPO ==="
                jq -r '.issues | group_by(.type) | .[] | "\(.[0].type): \(length) problemas"' sonar-issues.json
                
                echo ""
                echo "📊 === RESUMEN POR SEVERIDAD ==="
                jq -r '.issues | group_by(.severity) | .[] | "\(.[0].severity): \(length) problemas"' sonar-issues.json
              else
                echo "✅ No se encontraron problemas de calidad"
              fi
            else
              echo "⚠️  Endpoint /api/issues/search no funcionó, probando alternativas..."
              
              # Endpoint 2: Component measures
              echo "2. Probando /api/measures/component..."
              curl -s -u admin:admin "http://localhost:$SONAR_PORT/api/measures/component?component=MISW4204-202515-anb-Grupo03-local&metricKeys=issues,code_smells,bugs,vulnerabilities" > sonar-measures.json
              
              if [ -f "sonar-measures.json" ] && [ -s "sonar-measures.json" ] && jq empty sonar-measures.json 2>/dev/null; then
                echo "✅ Medidas obtenidas exitosamente"
                echo ""
                echo "📊 === MEDIDAS DETALLADAS ==="
                jq -r '.component.measures[]? | "📈 \(.metric): \(.value)"' sonar-measures.json
              else
                echo "⚠️  Endpoint /api/measures/component tampoco funcionó"
                
                # Endpoint 3: Probar con credenciales diferentes
                echo "3. Probando con credenciales alternativas..."
                curl -s -u admin:Son@rless123 "http://localhost:$SONAR_PORT/api/issues/search?componentKeys=MISW4204-202515-anb-Grupo03-local&resolved=false&ps=500" > sonar-issues-alt.json
                
                if [ -f "sonar-issues-alt.json" ] && [ -s "sonar-issues-alt.json" ] && jq empty sonar-issues-alt.json 2>/dev/null; then
                  echo "✅ Issues obtenidos con credenciales alternativas"
                  mv sonar-issues-alt.json sonar-issues.json
                  
                  TOTAL_ISSUES=$(jq '.total // 0' sonar-issues.json)
                  echo "📊 Total de problemas encontrados: $TOTAL_ISSUES"
                  
                  if [ "$TOTAL_ISSUES" -gt 0 ]; then
                    echo ""
                    echo "🔍 === DETALLES DE PROBLEMAS ==="
                    jq -r '.issues[]? | "📁 \(.component) - Línea \(.line)" as $location | "  • \(.message)" as $message | "  🏷️  Tipo: \(.type) | Severidad: \(.severity) | Regla: \(.rule)" as $details | "\($location)\n\($message)\n\($details)\n"' sonar-issues.json
                  fi
                else
                  echo "❌ No se pudieron obtener los issues desde ningún endpoint"
                  echo "   Esto puede indicar que la API no está disponible o las credenciales son incorrectas"
                fi
              fi
            fi
          else
            echo "❌ No se pudo conectar a SonarQube local"
            echo "   Esto puede ser normal si Sonarless no expone la API"
          fi

      - name: Mostrar métricas de Sonarless
        run: |
          set -e
          METRICS_FILE="sonar-metrics.json"
          
          echo "📊 === MÉTRICAS DE CALIDAD ==="
          cat "$METRICS_FILE"
          
          # Función para obtener métricas
          get_metric() {
            local key=$1
            jq -r ".component.measures[] | select(.metric == \"$key\").value" "$METRICS_FILE"
          }
          
          # Obtener métricas principales
          DUPLICATION=$(get_metric "duplicated_lines_density")
          CODE_SMELLS=$(get_metric "code_smells")
          VIOLATIONS=$(get_metric "violations")
          OPEN_ISSUES=$(get_metric "open_issues")
          SECURITY_RATING=$(get_metric "security_rating")
          SECURITY_HOTSPOTS=$(get_metric "security_hotspots")
          BUGS=$(get_metric "bugs")
          VULNERABILITIES=$(get_metric "vulnerabilities")
          COVERAGE=$(get_metric "coverage")
          LINES=$(get_metric "lines")
          NCLOC=$(get_metric "ncloc")
          
          echo ""
          echo "🔍 === RESUMEN DE MÉTRICAS ==="
          echo "Líneas de código (ncloc): ${NCLOC}"
          echo "Cobertura de pruebas: ${COVERAGE}%"
          echo "Duplicación: ${DUPLICATION}%"
          echo "Code Smells: ${CODE_SMELLS}"
          echo "Violaciones: ${VIOLATIONS}"
          echo "Issues abiertos: ${OPEN_ISSUES}"
          echo "Rating de seguridad: ${SECURITY_RATING}"
          echo "Security Hotspots: ${SECURITY_HOTSPOTS}"
          echo "Bugs: ${BUGS}"
          echo "Vulnerabilidades: ${VULNERABILITIES}"
          
          # Mostrar archivo de métricas completo para debugging
          echo ""
          echo "📋 === ARCHIVO DE MÉTRICAS COMPLETO ==="
          cat "sonar-metrics.json"
          
          # Verificar si hay métricas disponibles
          MEASURES_COUNT=$(jq '.component.measures | length' "$METRICS_FILE")
          if [ "$MEASURES_COUNT" -gt 0 ]; then
            echo ""
            echo "✅ Se encontraron $MEASURES_COUNT métricas de calidad"
            echo "   Revisa los valores arriba para identificar problemas"
          else
            echo ""
            echo "⚠️  No se encontraron métricas de calidad"
            echo "   Esto puede indicar que el scan falló o no hay problemas detectados"
          fi
          
          # Validación de Quality Gates
          echo ""
          echo "🚪 === VALIDACIÓN DE QUALITY GATES ==="
          
          if [[ -z "$DUPLICATION" || -z "$CODE_SMELLS" || -z "$VIOLATIONS" || -z "$OPEN_ISSUES" || -z "$SECURITY_RATING" || -z "$SECURITY_HOTSPOTS" || -z "$BUGS" ]]; then
            echo "❌ Error: alguna métrica está vacía"
            exit 1
          fi
          
          # # Validar duplicación (debe mantenerse en 0%)
          # if (( $(echo "$DUPLICATION > 0.0" | bc -l) )); then
          #   echo "❌ Duplication density (${DUPLICATION}%) exceeds limit (0.0%)"
          #   exit 1
          # else
          #   echo "✅ Duplication density: ${DUPLICATION}% (OK)"
          # fi
          
          # # Validar code smells (límite: 129 - valor actual)
          # if (( CODE_SMELLS > 129 )); then
          #   echo "❌ Code smells (${CODE_SMELLS}) exceed limit (129)"
          #   exit 1
          # else
          #   echo "✅ Code smells: ${CODE_SMELLS} (OK)"
          # fi
          
          # # Validar violations (límite: 130 - valor actual)
          # if (( VIOLATIONS > 130 )); then
          #   echo "❌ Violations (${VIOLATIONS}) exceed limit (130)"
          #   exit 1
          # else
          #   echo "✅ Violations: ${VIOLATIONS} (OK)"
          # fi
          
          # # Validar open issues (límite: 130 - valor actual)
          # if (( OPEN_ISSUES > 130 )); then
          #   echo "❌ Open issues (${OPEN_ISSUES}) exceed limit (130)"
          #   exit 1
          # else
          #   echo "✅ Open issues: ${OPEN_ISSUES} (OK)"
          # fi
          
          # # Validar bugs (límite: 1 - valor actual)
          # if (( BUGS > 1 )); then
          #   echo "❌ Bugs (${BUGS}) exceed limit (1)"
          #   exit 1
          # else
          #   echo "✅ Bugs: ${BUGS} (OK)"
          # fi
          
          # # Validar security rating (debe mantenerse en 1.0)
          # if (( $(echo "$SECURITY_RATING > 1.0" | bc -l) )); then
          #   echo "❌ Security rating (${SECURITY_RATING}) exceeds limit (1.0)"
          #   exit 1
          # else
          #   echo "✅ Security rating: ${SECURITY_RATING} (OK)"
          # fi
          
          # # Validar security hotspots (debe mantenerse en 0)
          # if (( SECURITY_HOTSPOTS > 0 )); then
          #   echo "❌ Security hotspots (${SECURITY_HOTSPOTS}) exceed limit (0)"
          #   exit 1
          # else
          #   echo "✅ Security hotspots: ${SECURITY_HOTSPOTS} (OK)"
          # fi
          
          # # Validar vulnerabilidades (debe mantenerse en 0)
          # if (( VULNERABILITIES > 0 )); then
          #   echo "❌ Vulnerabilities (${VULNERABILITIES}) exceed limit (0)"
          #   exit 1
          # else
          #   echo "✅ Vulnerabilities: ${VULNERABILITIES} (OK)"
          # fi
          
          echo ""
          echo "🎉 === TODOS LOS QUALITY GATES PASARON ==="
          echo "✅ === ANÁLISIS DE SONARLESS COMPLETADO ==="
          echo "   Los detalles de problemas se muestran arriba para revisión"

  # cpd-jscpd:
  #   name: Reporte de duplicación (CPD) - jscpd
  #   needs: verificar-pruebas
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: Instalar jscpd
  #       run: npm install -g jscpd@3.5.1

  #     - name: Ejecutar jscpd sobre Python
  #       run: |
  #         mkdir -p jscpd-report
  #         jscpd "storeapi" \
  #           --format "python" \
  #           --ignore "**/tests/**" \
  #           --ignore "**/test_**.py" \
  #           --ignore "**_test.py" \
  #           --ignore "**/__pycache__/**" \
  #           --ignore "**/migrations/**" \
  #           --ignore "**/venv/**" \
  #           --ignore "**/.venv/**" \
  #           --ignore "**/.git/**" \
  #           --ignore "**/*.pyc" \
  #           --reporters "html,json,console" \
  #           --output "jscpd-report" \
  #           --min-lines 10 \
  #           --min-tokens 30 \
  #           --gitignore

  #     - name: Instalar jq para procesar JSON
  #       run: sudo apt-get update && sudo apt-get install -y jq bc

  #     - name: Resumen de duplicación
  #       run: |
  #         if [ -f "jscpd-report/jscpd-report.json" ]; then
  #           echo "📊 ===== REPORTE DE DUPLICACIÓN ====="
  #           TOTAL_LINES=$(jq -r '.statistics.total.lines // 0' jscpd-report/jscpd-report.json)
  #           DUP_LINES=$(jq -r '.statistics.total.duplicatedLines // 0' jscpd-report/jscpd-report.json)
  #           PERCENT=$(jq -r '.statistics.total.percentage // 0' jscpd-report/jscpd-report.json)
  #           CLONES=$(jq -r '.duplicates | length // 0' jscpd-report/jscpd-report.json)
            
  #           echo "📈 Líneas totales analizadas: $TOTAL_LINES"
  #           echo "🔁 Líneas duplicadas: $DUP_LINES"
  #           echo "📈 Porcentaje de duplicación: ${PERCENT}%"
  #           echo "🔄 Bloques duplicados encontrados: $CLONES"
            
  #           # Mostrar archivos analizados
  #           echo ""
  #           echo "📁 Archivos analizados:"
  #           jq -r '.statistics.formats[].files // 0' jscpd-report/jscpd-report.json
  #         else
  #           echo "⚠️ No se encontró el reporte JSON"
  #           echo "📁 Contenido del directorio:"
  #           ls -la jscpd-report/ 2>/dev/null || echo "Directorio no existe"
  #           exit 0
  #         fi

  #     - name: Subir reporte como artifact
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: jscpd-report
  #         path: jscpd-report/

      # - name: Quality Gate
      #   id: quality-gate
      #   run: |
      #     if [ -f "jscpd-report/jscpd-report.json" ]; then
      #       PERCENT=$(jq -r '.statistics.total.percentage // 0' jscpd-report/jscpd-report.json)
      #       THRESHOLD=5.0
            
      #       echo "Porcentaje actual: ${PERCENT}%"
      #       echo "Umbral máximo: ${THRESHOLD}%"
            
      #       # Usar awk para comparación numérica
      #       if awk "BEGIN {exit !($PERCENT > $THRESHOLD)}"; then
      #         echo "❌ CALIDAD: REPROBADO - Duplicación ${PERCENT}% > ${THRESHOLD}%"
      #         echo "quality-status=failed" >> $GITHUB_OUTPUT
      #         exit 1
      #       else
      #         echo "✅ CALIDAD: APROBADO - Duplicación ${PERCENT}% ≤ ${THRESHOLD}%"
      #         echo "quality-status=passed" >> $GITHUB_OUTPUT
      #       fi
      #     else
      #       echo "⚠️ No se pudo verificar quality gate - reporte no encontrado"
      #       echo "quality-status=skipped" >> $GITHUB_OUTPUT
      #     fi

  merge-develop:
    name: Merge develop
    runs-on: ubuntu-latest
    needs: [verificar-pruebas, sonarless]
    if: ${{ needs.verificar-pruebas.outputs.respuesta-ok == 'OK' && contains(github.event.head_commit.message, 'END_HU') }}

    steps:
      - name: Checkout del código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Actualizar Feature branch
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git fetch origin develop:develop
          git merge develop --squash || echo "Nothing to squash"
          git commit -m "Merged changes from develop (squash merge)" || echo "No changes to commit"
         
      - name: Merge develop
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source-branch: ${{ github.ref_name }}
          target-branch: develop
          commit-message: "Merge branch ${{ github.ref_name }} into develop (Release)"
        
      - name: Ejecutar workflow de release
        if: success()
        run: |
          curl -X POST -H "Accept: application/vnd.github.everest-preview+json" \
           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           --data '{"event_type": "merge_develop"}' \
           https://api.github.com/repos/${{ github.repository }}/dispatches
