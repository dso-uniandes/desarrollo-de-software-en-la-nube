name: CI develop

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches:
      - 'feat/HU-**'

jobs:
  verificar-pruebas:
    name: Pruebas unitarias
    runs-on: ubuntu-latest
    outputs:
      respuesta-ok: ${{ steps.success.outputs.respuesta }}
      respuesta-fail: ${{ steps.failure.outputs.respuesta }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Configuración de entorno de Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: requirements.txt
          
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Esperar a que PostgreSQL esté listo
        run: |
          while ! pg_isready -h localhost -p 5432 -U postgres; do
            echo "Esperando a que PostgreSQL esté listo..."
            sleep 2
          done
          echo "PostgreSQL está listo!"

      - name: Configurar variables de entorno para tests
        run: |
          echo "ENV_STATE=test" >> $GITHUB_ENV
          echo "TEST_DATABASE_URL=postgresql+asyncpg://postgres:password@localhost:5432/test_db" >> $GITHUB_ENV

      - name: Correr pruebas con pytest
        id: correr-pruebas
        run: pytest storeapi/tests/ -v --tb=short

      - name: Status Error
        id: failure
        if: ${{ failure() }}
        env:
          MENSAJE_ERROR: FAIL
        run: echo "respuesta=${MENSAJE_ERROR}"  >> $GITHUB_OUTPUT

      - name: Status Success
        id: success
        if: ${{ success() }}
        env:
          MENSAJE_EXITO: OK
        run: echo "respuesta=${MENSAJE_EXITO}"  >> $GITHUB_OUTPUT
      
      - name: Imprimir respuesta
        id: imprimir
        run: |
          echo "Imprimir respuesta-ok ${{ steps.success.outputs.respuesta }}"
          echo "Imprimir respuesta-fail ${{ steps.failure.outputs.respuesta }}"

  merge-develop:
    name: Merge develop
    runs-on: ubuntu-latest
    needs: verificar-pruebas
    if: ${{ needs.verificar-pruebas.outputs.respuesta-ok == 'OK' &&  contains(github.event.head_commit.message, 'END_HU')}}

    steps:
      - name: Checkout del código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Actualizar Feature branch
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git fetch origin develop:develop
          git merge develop --squash || echo "Nothing to squash"
          git commit -m "Merged changes from develop (squash merge)" || echo "No changes to commit"
         
      - name: Merge develop
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source-branch: ${{github.ref_name}}
          target-branch: develop
          commit-message: "Merge branch ${{github.ref_name}} into develop (Release)"
        
      - name: Ejecutar workflow de release
        if: success()
        run: |
          curl -X POST -H "Accept: application/vnd.github.everest-preview+json" \
           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           --data '{"event_type": "merge_develop"}' \
           https://api.github.com/repos/${{ github.repository }}/dispatches
